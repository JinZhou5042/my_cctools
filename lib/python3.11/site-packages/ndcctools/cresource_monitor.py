# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cresource_monitor
else:
    import _cresource_monitor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_strArray(nelements):
    return _cresource_monitor.new_strArray(nelements)

def delete_strArray(ary):
    return _cresource_monitor.delete_strArray(ary)

def strArray_getitem(ary, index):
    return _cresource_monitor.strArray_getitem(ary, index)

def strArray_setitem(ary, index, value):
    return _cresource_monitor.strArray_setitem(ary, index, value)

def new_rmsummaryArray(nelements):
    return _cresource_monitor.new_rmsummaryArray(nelements)

def delete_rmsummaryArray(ary):
    return _cresource_monitor.delete_rmsummaryArray(ary)

def rmsummaryArray_getitem(ary, index):
    return _cresource_monitor.rmsummaryArray_getitem(ary, index)

def rmsummaryArray_setitem(ary, index, value):
    return _cresource_monitor.rmsummaryArray_setitem(ary, index, value)
D_INFO = _cresource_monitor.D_INFO
D_FATAL = _cresource_monitor.D_FATAL
D_ERROR = _cresource_monitor.D_ERROR
D_NOTICE = _cresource_monitor.D_NOTICE
D_DEBUG = _cresource_monitor.D_DEBUG
D_SYSCALL = _cresource_monitor.D_SYSCALL
D_CHANNEL = _cresource_monitor.D_CHANNEL
D_PROCESS = _cresource_monitor.D_PROCESS
D_RESOLVE = _cresource_monitor.D_RESOLVE
D_LIBCALL = _cresource_monitor.D_LIBCALL
D_LOCAL = _cresource_monitor.D_LOCAL
D_DNS = _cresource_monitor.D_DNS
D_TCP = _cresource_monitor.D_TCP
D_AUTH = _cresource_monitor.D_AUTH
D_IRODS = _cresource_monitor.D_IRODS
D_CVMFS = _cresource_monitor.D_CVMFS
D_HTTP = _cresource_monitor.D_HTTP
D_FTP = _cresource_monitor.D_FTP
D_NEST = _cresource_monitor.D_NEST
D_GROW = _cresource_monitor.D_GROW
D_CHIRP = _cresource_monitor.D_CHIRP
D_DCAP = _cresource_monitor.D_DCAP
D_RFIO = _cresource_monitor.D_RFIO
D_GLITE = _cresource_monitor.D_GLITE
D_MULTI = _cresource_monitor.D_MULTI
D_PSTREE = _cresource_monitor.D_PSTREE
D_ALLOC = _cresource_monitor.D_ALLOC
D_LFC = _cresource_monitor.D_LFC
D_GFAL = _cresource_monitor.D_GFAL
D_SUMMARY = _cresource_monitor.D_SUMMARY
D_LOGIN = _cresource_monitor.D_LOGIN
D_CACHE = _cresource_monitor.D_CACHE
D_POLL = _cresource_monitor.D_POLL
D_HDFS = _cresource_monitor.D_HDFS
D_WQ = _cresource_monitor.D_WQ
D_BXGRID = _cresource_monitor.D_BXGRID
D_USER = _cresource_monitor.D_USER
D_XROOTD = _cresource_monitor.D_XROOTD
D_MPI = _cresource_monitor.D_MPI
D_BATCH = _cresource_monitor.D_BATCH
D_RMON = _cresource_monitor.D_RMON
D_MAKEFLOW_RUN = _cresource_monitor.D_MAKEFLOW_RUN
D_MAKEFLOW_LEXER = _cresource_monitor.D_MAKEFLOW_LEXER
D_MAKEFLOW_PARSER = _cresource_monitor.D_MAKEFLOW_PARSER
D_MAKEFLOW_ALLOC = _cresource_monitor.D_MAKEFLOW_ALLOC
D_CONFUGA = _cresource_monitor.D_CONFUGA
D_JX = _cresource_monitor.D_JX
D_MAKEFLOW_HOOK = _cresource_monitor.D_MAKEFLOW_HOOK
D_EXT = _cresource_monitor.D_EXT
D_VINE = _cresource_monitor.D_VINE
D_TLQ = _cresource_monitor.D_TLQ
D_SSL = _cresource_monitor.D_SSL
D_BUCKETING = _cresource_monitor.D_BUCKETING
D_REMOTE = _cresource_monitor.D_REMOTE
D_MAKEFLOW = _cresource_monitor.D_MAKEFLOW
D_ALL = _cresource_monitor.D_ALL

def cctools_debug(*args):
    return _cresource_monitor.cctools_debug(*args)

def cctools_warn(*args):
    return _cresource_monitor.cctools_warn(*args)

def cctools_fatal(*args):
    return _cresource_monitor.cctools_fatal(*args)

def cctools_notice(*args):
    return _cresource_monitor.cctools_notice(*args)

def cctools_debug_config(name):
    return _cresource_monitor.cctools_debug_config(name)

def cctools_debug_config_file(file):
    return _cresource_monitor.cctools_debug_config_file(file)

def debug_config_file_e(file):
    return _cresource_monitor.debug_config_file_e(file)

def cctools_debug_config_file_size(size):
    return _cresource_monitor.cctools_debug_config_file_size(size)

def cctools_debug_config_fatal(callback):
    return _cresource_monitor.cctools_debug_config_fatal(callback)

def cctools_debug_config_getpid(getpidf):
    return _cresource_monitor.cctools_debug_config_getpid(getpidf)

def cctools_debug_flags_set(flagname):
    return _cresource_monitor.cctools_debug_flags_set(flagname)

def cctools_debug_flags_print(stream):
    return _cresource_monitor.cctools_debug_flags_print(stream)

def cctools_debug_flags_clear():
    return _cresource_monitor.cctools_debug_flags_clear()

def cctools_debug_set_flag_name(flag, name):
    return _cresource_monitor.cctools_debug_set_flag_name(flag, name)

def cctools_debug_flags_restore(flags):
    return _cresource_monitor.cctools_debug_flags_restore(flags)

def cctools_debug_rename(suffix):
    return _cresource_monitor.cctools_debug_rename(suffix)

def debug_reopen():
    return _cresource_monitor.debug_reopen()

def debug_close():
    return _cresource_monitor.debug_close()

def timestamp_get():
    return _cresource_monitor.timestamp_get()

def timestamp_fmt(buf, size, fmt, ts):
    return _cresource_monitor.timestamp_fmt(buf, size, fmt, ts)

def timestamp_sleep(interval):
    return _cresource_monitor.timestamp_sleep(interval)

def timestamp_file(file):
    return _cresource_monitor.timestamp_file(file)

def category_first_allocation_accum_times(h, keys, tau_mean, counts_cdp, times_accum):
    return _cresource_monitor.category_first_allocation_accum_times(h, keys, tau_mean, counts_cdp, times_accum)

def category_tune_bucket_size(resource, size):
    return _cresource_monitor.category_tune_bucket_size(resource, size)

def category_get_bucket_size(resource):
    return _cresource_monitor.category_get_bucket_size(resource)
CATEGORY_ALLOCATION_FIRST = _cresource_monitor.CATEGORY_ALLOCATION_FIRST
CATEGORY_ALLOCATION_AUTO = _cresource_monitor.CATEGORY_ALLOCATION_AUTO
CATEGORY_ALLOCATION_MAX = _cresource_monitor.CATEGORY_ALLOCATION_MAX
CATEGORY_ALLOCATION_ERROR = _cresource_monitor.CATEGORY_ALLOCATION_ERROR
CATEGORY_ALLOCATION_GREEDY_BUCKETING = _cresource_monitor.CATEGORY_ALLOCATION_GREEDY_BUCKETING
CATEGORY_ALLOCATION_EXHAUSTIVE_BUCKETING = _cresource_monitor.CATEGORY_ALLOCATION_EXHAUSTIVE_BUCKETING
CATEGORY_ALLOCATION_MODE_FIXED = _cresource_monitor.CATEGORY_ALLOCATION_MODE_FIXED
CATEGORY_ALLOCATION_MODE_MAX = _cresource_monitor.CATEGORY_ALLOCATION_MODE_MAX
CATEGORY_ALLOCATION_MODE_MIN_WASTE = _cresource_monitor.CATEGORY_ALLOCATION_MODE_MIN_WASTE
CATEGORY_ALLOCATION_MODE_MAX_THROUGHPUT = _cresource_monitor.CATEGORY_ALLOCATION_MODE_MAX_THROUGHPUT
CATEGORY_ALLOCATION_MODE_GREEDY_BUCKETING = _cresource_monitor.CATEGORY_ALLOCATION_MODE_GREEDY_BUCKETING
CATEGORY_ALLOCATION_MODE_EXHAUSTIVE_BUCKETING = _cresource_monitor.CATEGORY_ALLOCATION_MODE_EXHAUSTIVE_BUCKETING
class category(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_cresource_monitor.category_name_get, _cresource_monitor.category_name_set)
    allocation_mode = property(_cresource_monitor.category_allocation_mode_get, _cresource_monitor.category_allocation_mode_set)
    fast_abort = property(_cresource_monitor.category_fast_abort_get, _cresource_monitor.category_fast_abort_set)
    first_allocation = property(_cresource_monitor.category_first_allocation_get, _cresource_monitor.category_first_allocation_set)
    max_allocation = property(_cresource_monitor.category_max_allocation_get, _cresource_monitor.category_max_allocation_set)
    min_allocation = property(_cresource_monitor.category_min_allocation_get, _cresource_monitor.category_min_allocation_set)
    max_resources_seen = property(_cresource_monitor.category_max_resources_seen_get, _cresource_monitor.category_max_resources_seen_set)
    autolabel_resource = property(_cresource_monitor.category_autolabel_resource_get, _cresource_monitor.category_autolabel_resource_set)
    histograms = property(_cresource_monitor.category_histograms_get, _cresource_monitor.category_histograms_set)
    bucketing_manager = property(_cresource_monitor.category_bucketing_manager_get, _cresource_monitor.category_bucketing_manager_set)
    total_tasks = property(_cresource_monitor.category_total_tasks_get, _cresource_monitor.category_total_tasks_set)
    completions_since_last_reset = property(_cresource_monitor.category_completions_since_last_reset_get, _cresource_monitor.category_completions_since_last_reset_set)
    steady_state = property(_cresource_monitor.category_steady_state_get, _cresource_monitor.category_steady_state_set)
    average_task_time = property(_cresource_monitor.category_average_task_time_get, _cresource_monitor.category_average_task_time_set)
    wq_stats = property(_cresource_monitor.category_wq_stats_get, _cresource_monitor.category_wq_stats_set)
    vine_stats = property(_cresource_monitor.category_vine_stats_get, _cresource_monitor.category_vine_stats_set)
    mf_variables = property(_cresource_monitor.category_mf_variables_get, _cresource_monitor.category_mf_variables_set)

    def __init__(self):
        _cresource_monitor.category_swiginit(self, _cresource_monitor.new_category())
    __swig_destroy__ = _cresource_monitor.delete_category

# Register category in _cresource_monitor:
_cresource_monitor.category_swigregister(category)

def category_specify_allocation_mode(c, mode):
    return _cresource_monitor.category_specify_allocation_mode(c, mode)

def category_enable_auto_resource(c, resource_name, autolabel):
    return _cresource_monitor.category_enable_auto_resource(c, resource_name, autolabel)

def category_specify_max_allocation(c, s):
    return _cresource_monitor.category_specify_max_allocation(c, s)

def category_specify_min_allocation(c, s):
    return _cresource_monitor.category_specify_min_allocation(c, s)

def category_specify_first_allocation_guess(c, s):
    return _cresource_monitor.category_specify_first_allocation_guess(c, s)

def category_create(name):
    return _cresource_monitor.category_create(name)

def category_lookup_or_create(categories, name):
    return _cresource_monitor.category_lookup_or_create(categories, name)

def category_delete(categories, name):
    return _cresource_monitor.category_delete(categories, name)

def categories_initialize(categories, top, summaries_file):
    return _cresource_monitor.categories_initialize(categories, top, summaries_file)

def category_accumulate_summary(c, rs, max_worker):
    return _cresource_monitor.category_accumulate_summary(c, rs, max_worker)

def category_bucketing_accumulate_summary(c, rs, max_worker, taskid, success):
    return _cresource_monitor.category_bucketing_accumulate_summary(c, rs, max_worker, taskid, success)

def category_in_bucketing_mode(c):
    return _cresource_monitor.category_in_bucketing_mode(c)

def category_update_first_allocation(c, max_worker):
    return _cresource_monitor.category_update_first_allocation(c, max_worker)

def category_in_steady_state(c):
    return _cresource_monitor.category_in_steady_state(c)

def category_next_label(c, current_label, resource_overflow, user, measured):
    return _cresource_monitor.category_next_label(c, current_label, resource_overflow, user, measured)

def category_task_max_resources(c, user, request, taskid):
    return _cresource_monitor.category_task_max_resources(c, user, request, taskid)

def category_task_min_resources(c, user, request, taskid):
    return _cresource_monitor.category_task_min_resources(c, user, request, taskid)

def rmonitor_measure_process(pid):
    return _cresource_monitor.rmonitor_measure_process(pid)

def rmonitor_measure_process_update_to_peak(tr, pid):
    return _cresource_monitor.rmonitor_measure_process_update_to_peak(tr, pid)

def rmonitor_measure_host(arg1):
    return _cresource_monitor.rmonitor_measure_host(arg1)

def rmonitor_get_children(pid, children):
    return _cresource_monitor.rmonitor_get_children(pid, children)
MINIMONITOR_RESET = _cresource_monitor.MINIMONITOR_RESET
MINIMONITOR_ADD_PID = _cresource_monitor.MINIMONITOR_ADD_PID
MINIMONITOR_REMOVE_PID = _cresource_monitor.MINIMONITOR_REMOVE_PID
MINIMONITOR_MEASURE = _cresource_monitor.MINIMONITOR_MEASURE

def rmonitor_minimonitor(op, pid):
    return _cresource_monitor.rmonitor_minimonitor(op, pid)
RESOURCES_CORES = _cresource_monitor.RESOURCES_CORES
RESOURCES_MEMORY = _cresource_monitor.RESOURCES_MEMORY
RESOURCES_DISK = _cresource_monitor.RESOURCES_DISK
RESOURCES_WALL_TIME = _cresource_monitor.RESOURCES_WALL_TIME
RESOURCES_GPUS = _cresource_monitor.RESOURCES_GPUS
RESOURCES_MPI_PROCESSES = _cresource_monitor.RESOURCES_MPI_PROCESSES
class rmsummary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    category = property(_cresource_monitor.rmsummary_category_get, _cresource_monitor.rmsummary_category_set)
    command = property(_cresource_monitor.rmsummary_command_get, _cresource_monitor.rmsummary_command_set)
    taskid = property(_cresource_monitor.rmsummary_taskid_get, _cresource_monitor.rmsummary_taskid_set)
    cores = property(_cresource_monitor.rmsummary_cores_get, _cresource_monitor.rmsummary_cores_set)
    gpus = property(_cresource_monitor.rmsummary_gpus_get, _cresource_monitor.rmsummary_gpus_set)
    memory = property(_cresource_monitor.rmsummary_memory_get, _cresource_monitor.rmsummary_memory_set)
    disk = property(_cresource_monitor.rmsummary_disk_get, _cresource_monitor.rmsummary_disk_set)
    exit_type = property(_cresource_monitor.rmsummary_exit_type_get, _cresource_monitor.rmsummary_exit_type_set)
    signal = property(_cresource_monitor.rmsummary_signal_get, _cresource_monitor.rmsummary_signal_set)
    exit_status = property(_cresource_monitor.rmsummary_exit_status_get, _cresource_monitor.rmsummary_exit_status_set)
    last_error = property(_cresource_monitor.rmsummary_last_error_get, _cresource_monitor.rmsummary_last_error_set)
    start = property(_cresource_monitor.rmsummary_start_get, _cresource_monitor.rmsummary_start_set)
    end = property(_cresource_monitor.rmsummary_end_get, _cresource_monitor.rmsummary_end_set)
    cores_avg = property(_cresource_monitor.rmsummary_cores_avg_get, _cresource_monitor.rmsummary_cores_avg_set)
    wall_time = property(_cresource_monitor.rmsummary_wall_time_get, _cresource_monitor.rmsummary_wall_time_set)
    cpu_time = property(_cresource_monitor.rmsummary_cpu_time_get, _cresource_monitor.rmsummary_cpu_time_set)
    virtual_memory = property(_cresource_monitor.rmsummary_virtual_memory_get, _cresource_monitor.rmsummary_virtual_memory_set)
    swap_memory = property(_cresource_monitor.rmsummary_swap_memory_get, _cresource_monitor.rmsummary_swap_memory_set)
    bytes_read = property(_cresource_monitor.rmsummary_bytes_read_get, _cresource_monitor.rmsummary_bytes_read_set)
    bytes_written = property(_cresource_monitor.rmsummary_bytes_written_get, _cresource_monitor.rmsummary_bytes_written_set)
    bytes_received = property(_cresource_monitor.rmsummary_bytes_received_get, _cresource_monitor.rmsummary_bytes_received_set)
    bytes_sent = property(_cresource_monitor.rmsummary_bytes_sent_get, _cresource_monitor.rmsummary_bytes_sent_set)
    bandwidth = property(_cresource_monitor.rmsummary_bandwidth_get, _cresource_monitor.rmsummary_bandwidth_set)
    machine_cpus = property(_cresource_monitor.rmsummary_machine_cpus_get, _cresource_monitor.rmsummary_machine_cpus_set)
    machine_load = property(_cresource_monitor.rmsummary_machine_load_get, _cresource_monitor.rmsummary_machine_load_set)
    context_switches = property(_cresource_monitor.rmsummary_context_switches_get, _cresource_monitor.rmsummary_context_switches_set)
    max_concurrent_processes = property(_cresource_monitor.rmsummary_max_concurrent_processes_get, _cresource_monitor.rmsummary_max_concurrent_processes_set)
    total_processes = property(_cresource_monitor.rmsummary_total_processes_get, _cresource_monitor.rmsummary_total_processes_set)
    total_files = property(_cresource_monitor.rmsummary_total_files_get, _cresource_monitor.rmsummary_total_files_set)
    fs_nodes = property(_cresource_monitor.rmsummary_fs_nodes_get, _cresource_monitor.rmsummary_fs_nodes_set)
    workers = property(_cresource_monitor.rmsummary_workers_get, _cresource_monitor.rmsummary_workers_set)
    limits_exceeded = property(_cresource_monitor.rmsummary_limits_exceeded_get, _cresource_monitor.rmsummary_limits_exceeded_set)
    peak_times = property(_cresource_monitor.rmsummary_peak_times_get, _cresource_monitor.rmsummary_peak_times_set)
    snapshot_name = property(_cresource_monitor.rmsummary_snapshot_name_get, _cresource_monitor.rmsummary_snapshot_name_set)
    snapshots_count = property(_cresource_monitor.rmsummary_snapshots_count_get, _cresource_monitor.rmsummary_snapshots_count_set)
    snapshots = property(_cresource_monitor.rmsummary_snapshots_get, _cresource_monitor.rmsummary_snapshots_set)

    def __init__(self):
        _cresource_monitor.rmsummary_swiginit(self, _cresource_monitor.new_rmsummary())
    __swig_destroy__ = _cresource_monitor.delete_rmsummary

    _resources = None
    def list_resources():
        if not rmsummary._resources:
            n = rmsummary_num_resources()
            r = rmsummary_list_resources()
            rmsummary._resources = []
            for i in range(0, n):
                rmsummary._resources.append(strArray_getitem(r, i))
        return rmsummary._resources

    def to_dict(self):
        d = {}
        for k in ['category', 'command', 'taskid', 'exit_type', 'signal', 'exit_status', 'last_error'] + rmsummary.list_resources():
            v = getattr(self, k)
            if v is None or (isinstance(v, int) and v < 0):
                continue
            else:
                d[k] = v
        for k in ['limits_exceeded', 'peak_times']:
            v = getattr(self, k)
            if v:
                d[k] = v.to_dict()
        return d

    @classmethod
    def from_dict(cls, pairs):
        rm = rmsummary()
        for k in pairs.keys():
            v = pairs[k]
            if k in ['limits_exceeded', 'peak_times']:
                v = rmsummary.from_dict(v)
            try:
                setattr(rm, k, v)
            except KeyError:
                pass
        return rm

    def __getstate__(self):
        return self.to_dict()

    def __setstate__(self, pairs):
        oth = rmsummary.from_dict(pairs)
        self.__init__()
        rmsummary_merge_max(self, oth)
        setattr(self, 'limits_exceeded', rmsummary_copy(oth.limits_exceeded, 0))
        setattr(self, 'peak_times', rmsummary_copy(oth.limits_exceeded, 0))


# Register rmsummary in _cresource_monitor:
_cresource_monitor.rmsummary_swigregister(rmsummary)

def rmsummary_print(stream, s, pprint, verbatim_fields):
    return _cresource_monitor.rmsummary_print(stream, s, pprint, verbatim_fields)

def rmsummary_print_buffer(B, s, only_resources):
    return _cresource_monitor.rmsummary_print_buffer(B, s, only_resources)

def rmsummary_print_string(s, only_resources):
    return _cresource_monitor.rmsummary_print_string(s, only_resources)

def rmsummary_set(s, resource, value):
    return _cresource_monitor.rmsummary_set(s, resource, value)

def rmsummary_get(s, resource):
    return _cresource_monitor.rmsummary_get(s, resource)

def rmsummary_set_by_offset(s, offset, value):
    return _cresource_monitor.rmsummary_set_by_offset(s, offset, value)

def rmsummary_get_by_offset(s, offset):
    return _cresource_monitor.rmsummary_get_by_offset(s, offset)

def rmsummary_parse_file_single(filename):
    return _cresource_monitor.rmsummary_parse_file_single(filename)

def rmsummary_parse_string(str):
    return _cresource_monitor.rmsummary_parse_string(str)

def rmsummary_parse_file_multiple(filename):
    return _cresource_monitor.rmsummary_parse_file_multiple(filename)

def rmsummary_to_json(s, only_resources):
    return _cresource_monitor.rmsummary_to_json(s, only_resources)

def json_to_rmsummary(j):
    return _cresource_monitor.json_to_rmsummary(j)

def rmsummary_create(default_value):
    return _cresource_monitor.rmsummary_create(default_value)

def rmsummary_delete(s):
    return _cresource_monitor.rmsummary_delete(s)

def rmsummary_read_env_vars(s):
    return _cresource_monitor.rmsummary_read_env_vars(s)

def rmsummary_merge_max_w_time(dest, src):
    return _cresource_monitor.rmsummary_merge_max_w_time(dest, src)

def rmsummary_copy(src, deep_copy):
    return _cresource_monitor.rmsummary_copy(src, deep_copy)

def rmsummary_merge_override(dest, src):
    return _cresource_monitor.rmsummary_merge_override(dest, src)

def rmsummary_merge_override_basic(dest, src):
    return _cresource_monitor.rmsummary_merge_override_basic(dest, src)

def rmsummary_merge_max(dest, src):
    return _cresource_monitor.rmsummary_merge_max(dest, src)

def rmsummary_merge_min(dest, src):
    return _cresource_monitor.rmsummary_merge_min(dest, src)

def rmsummary_add(dest, src):
    return _cresource_monitor.rmsummary_add(dest, src)

def rmsummary_debug_report(s):
    return _cresource_monitor.rmsummary_debug_report(s)

def rmsummary_get_snapshot(s, i):
    return _cresource_monitor.rmsummary_get_snapshot(s, i)

def rmsummary_check_limits(measured, limits):
    return _cresource_monitor.rmsummary_check_limits(measured, limits)

def rmsummary_num_resources():
    return _cresource_monitor.rmsummary_num_resources()

def rmsummary_list_resources():
    return _cresource_monitor.rmsummary_list_resources()

def rmsummary_resource_units(resource_name):
    return _cresource_monitor.rmsummary_resource_units(resource_name)

def rmsummary_resource_decimals(resource_name):
    return _cresource_monitor.rmsummary_resource_decimals(resource_name)

def rmsummary_resource_offset(resource_name):
    return _cresource_monitor.rmsummary_resource_offset(resource_name)

def rmsummary_resource_to_str(resource, value, include_units):
    return _cresource_monitor.rmsummary_resource_to_str(resource, value, include_units)

