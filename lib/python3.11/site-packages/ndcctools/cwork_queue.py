# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cwork_queue
else:
    import _cwork_queue

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_rmsummayArray(nelements):
    return _cwork_queue.new_rmsummayArray(nelements)

def delete_rmsummayArray(ary):
    return _cwork_queue.delete_rmsummayArray(ary)

def rmsummayArray_getitem(ary, index):
    return _cwork_queue.rmsummayArray_getitem(ary, index)

def rmsummayArray_setitem(ary, index, value):
    return _cwork_queue.rmsummayArray_setitem(ary, index, value)
D_INFO = _cwork_queue.D_INFO
D_FATAL = _cwork_queue.D_FATAL
D_ERROR = _cwork_queue.D_ERROR
D_NOTICE = _cwork_queue.D_NOTICE
D_DEBUG = _cwork_queue.D_DEBUG
D_SYSCALL = _cwork_queue.D_SYSCALL
D_CHANNEL = _cwork_queue.D_CHANNEL
D_PROCESS = _cwork_queue.D_PROCESS
D_RESOLVE = _cwork_queue.D_RESOLVE
D_LIBCALL = _cwork_queue.D_LIBCALL
D_LOCAL = _cwork_queue.D_LOCAL
D_DNS = _cwork_queue.D_DNS
D_TCP = _cwork_queue.D_TCP
D_AUTH = _cwork_queue.D_AUTH
D_IRODS = _cwork_queue.D_IRODS
D_CVMFS = _cwork_queue.D_CVMFS
D_HTTP = _cwork_queue.D_HTTP
D_FTP = _cwork_queue.D_FTP
D_NEST = _cwork_queue.D_NEST
D_GROW = _cwork_queue.D_GROW
D_CHIRP = _cwork_queue.D_CHIRP
D_DCAP = _cwork_queue.D_DCAP
D_RFIO = _cwork_queue.D_RFIO
D_GLITE = _cwork_queue.D_GLITE
D_MULTI = _cwork_queue.D_MULTI
D_PSTREE = _cwork_queue.D_PSTREE
D_ALLOC = _cwork_queue.D_ALLOC
D_LFC = _cwork_queue.D_LFC
D_GFAL = _cwork_queue.D_GFAL
D_SUMMARY = _cwork_queue.D_SUMMARY
D_LOGIN = _cwork_queue.D_LOGIN
D_CACHE = _cwork_queue.D_CACHE
D_POLL = _cwork_queue.D_POLL
D_HDFS = _cwork_queue.D_HDFS
D_WQ = _cwork_queue.D_WQ
D_BXGRID = _cwork_queue.D_BXGRID
D_USER = _cwork_queue.D_USER
D_XROOTD = _cwork_queue.D_XROOTD
D_MPI = _cwork_queue.D_MPI
D_BATCH = _cwork_queue.D_BATCH
D_RMON = _cwork_queue.D_RMON
D_MAKEFLOW_RUN = _cwork_queue.D_MAKEFLOW_RUN
D_MAKEFLOW_LEXER = _cwork_queue.D_MAKEFLOW_LEXER
D_MAKEFLOW_PARSER = _cwork_queue.D_MAKEFLOW_PARSER
D_MAKEFLOW_ALLOC = _cwork_queue.D_MAKEFLOW_ALLOC
D_CONFUGA = _cwork_queue.D_CONFUGA
D_JX = _cwork_queue.D_JX
D_MAKEFLOW_HOOK = _cwork_queue.D_MAKEFLOW_HOOK
D_EXT = _cwork_queue.D_EXT
D_VINE = _cwork_queue.D_VINE
D_TLQ = _cwork_queue.D_TLQ
D_SSL = _cwork_queue.D_SSL
D_BUCKETING = _cwork_queue.D_BUCKETING
D_REMOTE = _cwork_queue.D_REMOTE
D_MAKEFLOW = _cwork_queue.D_MAKEFLOW
D_ALL = _cwork_queue.D_ALL

def cctools_debug(*args):
    return _cwork_queue.cctools_debug(*args)

def cctools_warn(*args):
    return _cwork_queue.cctools_warn(*args)

def cctools_fatal(*args):
    return _cwork_queue.cctools_fatal(*args)

def cctools_notice(*args):
    return _cwork_queue.cctools_notice(*args)

def cctools_debug_config(name):
    return _cwork_queue.cctools_debug_config(name)

def cctools_debug_config_file(file):
    return _cwork_queue.cctools_debug_config_file(file)

def debug_config_file_e(file):
    return _cwork_queue.debug_config_file_e(file)

def cctools_debug_config_file_size(size):
    return _cwork_queue.cctools_debug_config_file_size(size)

def cctools_debug_config_fatal(callback):
    return _cwork_queue.cctools_debug_config_fatal(callback)

def cctools_debug_config_getpid(getpidf):
    return _cwork_queue.cctools_debug_config_getpid(getpidf)

def cctools_debug_flags_set(flagname):
    return _cwork_queue.cctools_debug_flags_set(flagname)

def cctools_debug_flags_print(stream):
    return _cwork_queue.cctools_debug_flags_print(stream)

def cctools_debug_flags_clear():
    return _cwork_queue.cctools_debug_flags_clear()

def cctools_debug_set_flag_name(flag, name):
    return _cwork_queue.cctools_debug_set_flag_name(flag, name)

def cctools_debug_flags_restore(flags):
    return _cwork_queue.cctools_debug_flags_restore(flags)

def cctools_debug_rename(suffix):
    return _cwork_queue.cctools_debug_rename(suffix)

def debug_reopen():
    return _cwork_queue.debug_reopen()

def debug_close():
    return _cwork_queue.debug_close()

def timestamp_get():
    return _cwork_queue.timestamp_get()

def timestamp_fmt(buf, size, fmt, ts):
    return _cwork_queue.timestamp_fmt(buf, size, fmt, ts)

def timestamp_sleep(interval):
    return _cwork_queue.timestamp_sleep(interval)

def timestamp_file(file):
    return _cwork_queue.timestamp_file(file)
WORK_QUEUE_DEFAULT_PORT = _cwork_queue.WORK_QUEUE_DEFAULT_PORT
WORK_QUEUE_RANDOM_PORT = _cwork_queue.WORK_QUEUE_RANDOM_PORT
WORK_QUEUE_WAITFORTASK = _cwork_queue.WORK_QUEUE_WAITFORTASK
WORK_QUEUE_DEFAULT_KEEPALIVE_INTERVAL = _cwork_queue.WORK_QUEUE_DEFAULT_KEEPALIVE_INTERVAL
WORK_QUEUE_DEFAULT_KEEPALIVE_TIMEOUT = _cwork_queue.WORK_QUEUE_DEFAULT_KEEPALIVE_TIMEOUT
WORK_QUEUE_INPUT = _cwork_queue.WORK_QUEUE_INPUT
WORK_QUEUE_OUTPUT = _cwork_queue.WORK_QUEUE_OUTPUT
WORK_QUEUE_NOCACHE = _cwork_queue.WORK_QUEUE_NOCACHE
WORK_QUEUE_CACHE = _cwork_queue.WORK_QUEUE_CACHE
WORK_QUEUE_SYMLINK = _cwork_queue.WORK_QUEUE_SYMLINK
WORK_QUEUE_WATCH = _cwork_queue.WORK_QUEUE_WATCH
WORK_QUEUE_FAILURE_ONLY = _cwork_queue.WORK_QUEUE_FAILURE_ONLY
WORK_QUEUE_SUCCESS_ONLY = _cwork_queue.WORK_QUEUE_SUCCESS_ONLY
WORK_QUEUE_PREEXIST = _cwork_queue.WORK_QUEUE_PREEXIST
WORK_QUEUE_SCHEDULE_UNSET = _cwork_queue.WORK_QUEUE_SCHEDULE_UNSET
WORK_QUEUE_SCHEDULE_FCFS = _cwork_queue.WORK_QUEUE_SCHEDULE_FCFS
WORK_QUEUE_SCHEDULE_FILES = _cwork_queue.WORK_QUEUE_SCHEDULE_FILES
WORK_QUEUE_SCHEDULE_TIME = _cwork_queue.WORK_QUEUE_SCHEDULE_TIME
WORK_QUEUE_SCHEDULE_RAND = _cwork_queue.WORK_QUEUE_SCHEDULE_RAND
WORK_QUEUE_SCHEDULE_WORST = _cwork_queue.WORK_QUEUE_SCHEDULE_WORST
WORK_QUEUE_RESULT_SUCCESS = _cwork_queue.WORK_QUEUE_RESULT_SUCCESS
WORK_QUEUE_RESULT_INPUT_MISSING = _cwork_queue.WORK_QUEUE_RESULT_INPUT_MISSING
WORK_QUEUE_RESULT_OUTPUT_MISSING = _cwork_queue.WORK_QUEUE_RESULT_OUTPUT_MISSING
WORK_QUEUE_RESULT_STDOUT_MISSING = _cwork_queue.WORK_QUEUE_RESULT_STDOUT_MISSING
WORK_QUEUE_RESULT_SIGNAL = _cwork_queue.WORK_QUEUE_RESULT_SIGNAL
WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION = _cwork_queue.WORK_QUEUE_RESULT_RESOURCE_EXHAUSTION
WORK_QUEUE_RESULT_TASK_TIMEOUT = _cwork_queue.WORK_QUEUE_RESULT_TASK_TIMEOUT
WORK_QUEUE_RESULT_UNKNOWN = _cwork_queue.WORK_QUEUE_RESULT_UNKNOWN
WORK_QUEUE_RESULT_FORSAKEN = _cwork_queue.WORK_QUEUE_RESULT_FORSAKEN
WORK_QUEUE_RESULT_MAX_RETRIES = _cwork_queue.WORK_QUEUE_RESULT_MAX_RETRIES
WORK_QUEUE_RESULT_TASK_MAX_RUN_TIME = _cwork_queue.WORK_QUEUE_RESULT_TASK_MAX_RUN_TIME
WORK_QUEUE_RESULT_DISK_ALLOC_FULL = _cwork_queue.WORK_QUEUE_RESULT_DISK_ALLOC_FULL
WORK_QUEUE_RESULT_RMONITOR_ERROR = _cwork_queue.WORK_QUEUE_RESULT_RMONITOR_ERROR
WORK_QUEUE_RESULT_OUTPUT_TRANSFER_ERROR = _cwork_queue.WORK_QUEUE_RESULT_OUTPUT_TRANSFER_ERROR
WORK_QUEUE_TASK_UNKNOWN = _cwork_queue.WORK_QUEUE_TASK_UNKNOWN
WORK_QUEUE_TASK_READY = _cwork_queue.WORK_QUEUE_TASK_READY
WORK_QUEUE_TASK_RUNNING = _cwork_queue.WORK_QUEUE_TASK_RUNNING
WORK_QUEUE_TASK_WAITING_RETRIEVAL = _cwork_queue.WORK_QUEUE_TASK_WAITING_RETRIEVAL
WORK_QUEUE_TASK_RETRIEVED = _cwork_queue.WORK_QUEUE_TASK_RETRIEVED
WORK_QUEUE_TASK_DONE = _cwork_queue.WORK_QUEUE_TASK_DONE
WORK_QUEUE_TASK_CANCELED = _cwork_queue.WORK_QUEUE_TASK_CANCELED
WORK_QUEUE_FILE = _cwork_queue.WORK_QUEUE_FILE
WORK_QUEUE_BUFFER = _cwork_queue.WORK_QUEUE_BUFFER
WORK_QUEUE_REMOTECMD = _cwork_queue.WORK_QUEUE_REMOTECMD
WORK_QUEUE_FILE_PIECE = _cwork_queue.WORK_QUEUE_FILE_PIECE
WORK_QUEUE_DIRECTORY = _cwork_queue.WORK_QUEUE_DIRECTORY
WORK_QUEUE_URL = _cwork_queue.WORK_QUEUE_URL
WORK_QUEUE_ALLOCATION_MODE_FIXED = _cwork_queue.WORK_QUEUE_ALLOCATION_MODE_FIXED
WORK_QUEUE_ALLOCATION_MODE_MAX = _cwork_queue.WORK_QUEUE_ALLOCATION_MODE_MAX
WORK_QUEUE_ALLOCATION_MODE_MIN_WASTE = _cwork_queue.WORK_QUEUE_ALLOCATION_MODE_MIN_WASTE
WORK_QUEUE_ALLOCATION_MODE_MAX_THROUGHPUT = _cwork_queue.WORK_QUEUE_ALLOCATION_MODE_MAX_THROUGHPUT
WORK_QUEUE_ALLOCATION_MODE_GREEDY_BUCKETING = _cwork_queue.WORK_QUEUE_ALLOCATION_MODE_GREEDY_BUCKETING
WORK_QUEUE_ALLOCATION_MODE_EXHAUSTIVE_BUCKETING = _cwork_queue.WORK_QUEUE_ALLOCATION_MODE_EXHAUSTIVE_BUCKETING
class work_queue_task(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tag = property(_cwork_queue.work_queue_task_tag_get, _cwork_queue.work_queue_task_tag_set)
    command_line = property(_cwork_queue.work_queue_task_command_line_get, _cwork_queue.work_queue_task_command_line_set)
    worker_selection_algorithm = property(_cwork_queue.work_queue_task_worker_selection_algorithm_get, _cwork_queue.work_queue_task_worker_selection_algorithm_set)
    output = property(_cwork_queue.work_queue_task_output_get, _cwork_queue.work_queue_task_output_set)
    env_list = property(_cwork_queue.work_queue_task_env_list_get, _cwork_queue.work_queue_task_env_list_set)
    taskid = property(_cwork_queue.work_queue_task_taskid_get, _cwork_queue.work_queue_task_taskid_set)
    return_status = property(_cwork_queue.work_queue_task_return_status_get, _cwork_queue.work_queue_task_return_status_set)
    result = property(_cwork_queue.work_queue_task_result_get, _cwork_queue.work_queue_task_result_set)
    host = property(_cwork_queue.work_queue_task_host_get, _cwork_queue.work_queue_task_host_set)
    hostname = property(_cwork_queue.work_queue_task_hostname_get, _cwork_queue.work_queue_task_hostname_set)
    coprocess = property(_cwork_queue.work_queue_task_coprocess_get, _cwork_queue.work_queue_task_coprocess_set)
    category = property(_cwork_queue.work_queue_task_category_get, _cwork_queue.work_queue_task_category_set)
    resource_request = property(_cwork_queue.work_queue_task_resource_request_get, _cwork_queue.work_queue_task_resource_request_set)
    priority = property(_cwork_queue.work_queue_task_priority_get, _cwork_queue.work_queue_task_priority_set)
    max_retries = property(_cwork_queue.work_queue_task_max_retries_get, _cwork_queue.work_queue_task_max_retries_set)
    try_count = property(_cwork_queue.work_queue_task_try_count_get, _cwork_queue.work_queue_task_try_count_set)
    exhausted_attempts = property(_cwork_queue.work_queue_task_exhausted_attempts_get, _cwork_queue.work_queue_task_exhausted_attempts_set)
    fast_abort_count = property(_cwork_queue.work_queue_task_fast_abort_count_get, _cwork_queue.work_queue_task_fast_abort_count_set)
    time_when_submitted = property(_cwork_queue.work_queue_task_time_when_submitted_get, _cwork_queue.work_queue_task_time_when_submitted_set)
    time_when_done = property(_cwork_queue.work_queue_task_time_when_done_get, _cwork_queue.work_queue_task_time_when_done_set)
    disk_allocation_exhausted = property(_cwork_queue.work_queue_task_disk_allocation_exhausted_get, _cwork_queue.work_queue_task_disk_allocation_exhausted_set)
    min_running_time = property(_cwork_queue.work_queue_task_min_running_time_get, _cwork_queue.work_queue_task_min_running_time_set)
    time_when_commit_start = property(_cwork_queue.work_queue_task_time_when_commit_start_get, _cwork_queue.work_queue_task_time_when_commit_start_set)
    time_when_commit_end = property(_cwork_queue.work_queue_task_time_when_commit_end_get, _cwork_queue.work_queue_task_time_when_commit_end_set)
    time_when_retrieval = property(_cwork_queue.work_queue_task_time_when_retrieval_get, _cwork_queue.work_queue_task_time_when_retrieval_set)
    time_workers_execute_last = property(_cwork_queue.work_queue_task_time_workers_execute_last_get, _cwork_queue.work_queue_task_time_workers_execute_last_set)
    time_workers_execute_all = property(_cwork_queue.work_queue_task_time_workers_execute_all_get, _cwork_queue.work_queue_task_time_workers_execute_all_set)
    time_workers_execute_exhaustion = property(_cwork_queue.work_queue_task_time_workers_execute_exhaustion_get, _cwork_queue.work_queue_task_time_workers_execute_exhaustion_set)
    time_workers_execute_failure = property(_cwork_queue.work_queue_task_time_workers_execute_failure_get, _cwork_queue.work_queue_task_time_workers_execute_failure_set)
    bytes_received = property(_cwork_queue.work_queue_task_bytes_received_get, _cwork_queue.work_queue_task_bytes_received_set)
    bytes_sent = property(_cwork_queue.work_queue_task_bytes_sent_get, _cwork_queue.work_queue_task_bytes_sent_set)
    bytes_transferred = property(_cwork_queue.work_queue_task_bytes_transferred_get, _cwork_queue.work_queue_task_bytes_transferred_set)
    resources_allocated = property(_cwork_queue.work_queue_task_resources_allocated_get, _cwork_queue.work_queue_task_resources_allocated_set)
    resources_measured = property(_cwork_queue.work_queue_task_resources_measured_get, _cwork_queue.work_queue_task_resources_measured_set)
    resources_requested = property(_cwork_queue.work_queue_task_resources_requested_get, _cwork_queue.work_queue_task_resources_requested_set)
    monitor_output_directory = property(_cwork_queue.work_queue_task_monitor_output_directory_get, _cwork_queue.work_queue_task_monitor_output_directory_set)
    monitor_snapshot_file = property(_cwork_queue.work_queue_task_monitor_snapshot_file_get, _cwork_queue.work_queue_task_monitor_snapshot_file_set)
    features = property(_cwork_queue.work_queue_task_features_get, _cwork_queue.work_queue_task_features_set)
    time_task_submit = property(_cwork_queue.work_queue_task_time_task_submit_get, _cwork_queue.work_queue_task_time_task_submit_set)
    time_task_finish = property(_cwork_queue.work_queue_task_time_task_finish_get, _cwork_queue.work_queue_task_time_task_finish_set)
    time_committed = property(_cwork_queue.work_queue_task_time_committed_get, _cwork_queue.work_queue_task_time_committed_set)
    time_send_input_start = property(_cwork_queue.work_queue_task_time_send_input_start_get, _cwork_queue.work_queue_task_time_send_input_start_set)
    time_send_input_finish = property(_cwork_queue.work_queue_task_time_send_input_finish_get, _cwork_queue.work_queue_task_time_send_input_finish_set)
    time_receive_result_start = property(_cwork_queue.work_queue_task_time_receive_result_start_get, _cwork_queue.work_queue_task_time_receive_result_start_set)
    time_receive_result_finish = property(_cwork_queue.work_queue_task_time_receive_result_finish_get, _cwork_queue.work_queue_task_time_receive_result_finish_set)
    time_receive_output_start = property(_cwork_queue.work_queue_task_time_receive_output_start_get, _cwork_queue.work_queue_task_time_receive_output_start_set)
    time_receive_output_finish = property(_cwork_queue.work_queue_task_time_receive_output_finish_get, _cwork_queue.work_queue_task_time_receive_output_finish_set)
    time_execute_cmd_start = property(_cwork_queue.work_queue_task_time_execute_cmd_start_get, _cwork_queue.work_queue_task_time_execute_cmd_start_set)
    time_execute_cmd_finish = property(_cwork_queue.work_queue_task_time_execute_cmd_finish_get, _cwork_queue.work_queue_task_time_execute_cmd_finish_set)
    total_transfer_time = property(_cwork_queue.work_queue_task_total_transfer_time_get, _cwork_queue.work_queue_task_total_transfer_time_set)
    cmd_execution_time = property(_cwork_queue.work_queue_task_cmd_execution_time_get, _cwork_queue.work_queue_task_cmd_execution_time_set)
    total_cmd_execution_time = property(_cwork_queue.work_queue_task_total_cmd_execution_time_get, _cwork_queue.work_queue_task_total_cmd_execution_time_set)
    total_cmd_exhausted_execute_time = property(_cwork_queue.work_queue_task_total_cmd_exhausted_execute_time_get, _cwork_queue.work_queue_task_total_cmd_exhausted_execute_time_set)
    total_time_until_worker_failure = property(_cwork_queue.work_queue_task_total_time_until_worker_failure_get, _cwork_queue.work_queue_task_total_time_until_worker_failure_set)
    total_bytes_received = property(_cwork_queue.work_queue_task_total_bytes_received_get, _cwork_queue.work_queue_task_total_bytes_received_set)
    total_bytes_sent = property(_cwork_queue.work_queue_task_total_bytes_sent_get, _cwork_queue.work_queue_task_total_bytes_sent_set)
    total_bytes_transferred = property(_cwork_queue.work_queue_task_total_bytes_transferred_get, _cwork_queue.work_queue_task_total_bytes_transferred_set)
    time_app_delay = property(_cwork_queue.work_queue_task_time_app_delay_get, _cwork_queue.work_queue_task_time_app_delay_set)

    def __init__(self):
        _cwork_queue.work_queue_task_swiginit(self, _cwork_queue.new_work_queue_task())
    __swig_destroy__ = _cwork_queue.delete_work_queue_task

# Register work_queue_task in _cwork_queue:
_cwork_queue.work_queue_task_swigregister(work_queue_task)
class work_queue_stats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    workers_connected = property(_cwork_queue.work_queue_stats_workers_connected_get, _cwork_queue.work_queue_stats_workers_connected_set)
    workers_init = property(_cwork_queue.work_queue_stats_workers_init_get, _cwork_queue.work_queue_stats_workers_init_set)
    workers_idle = property(_cwork_queue.work_queue_stats_workers_idle_get, _cwork_queue.work_queue_stats_workers_idle_set)
    workers_busy = property(_cwork_queue.work_queue_stats_workers_busy_get, _cwork_queue.work_queue_stats_workers_busy_set)
    workers_able = property(_cwork_queue.work_queue_stats_workers_able_get, _cwork_queue.work_queue_stats_workers_able_set)
    workers_joined = property(_cwork_queue.work_queue_stats_workers_joined_get, _cwork_queue.work_queue_stats_workers_joined_set)
    workers_removed = property(_cwork_queue.work_queue_stats_workers_removed_get, _cwork_queue.work_queue_stats_workers_removed_set)
    workers_released = property(_cwork_queue.work_queue_stats_workers_released_get, _cwork_queue.work_queue_stats_workers_released_set)
    workers_idled_out = property(_cwork_queue.work_queue_stats_workers_idled_out_get, _cwork_queue.work_queue_stats_workers_idled_out_set)
    workers_fast_aborted = property(_cwork_queue.work_queue_stats_workers_fast_aborted_get, _cwork_queue.work_queue_stats_workers_fast_aborted_set)
    workers_blocked = property(_cwork_queue.work_queue_stats_workers_blocked_get, _cwork_queue.work_queue_stats_workers_blocked_set)
    workers_lost = property(_cwork_queue.work_queue_stats_workers_lost_get, _cwork_queue.work_queue_stats_workers_lost_set)
    tasks_waiting = property(_cwork_queue.work_queue_stats_tasks_waiting_get, _cwork_queue.work_queue_stats_tasks_waiting_set)
    tasks_on_workers = property(_cwork_queue.work_queue_stats_tasks_on_workers_get, _cwork_queue.work_queue_stats_tasks_on_workers_set)
    tasks_running = property(_cwork_queue.work_queue_stats_tasks_running_get, _cwork_queue.work_queue_stats_tasks_running_set)
    tasks_with_results = property(_cwork_queue.work_queue_stats_tasks_with_results_get, _cwork_queue.work_queue_stats_tasks_with_results_set)
    tasks_submitted = property(_cwork_queue.work_queue_stats_tasks_submitted_get, _cwork_queue.work_queue_stats_tasks_submitted_set)
    tasks_dispatched = property(_cwork_queue.work_queue_stats_tasks_dispatched_get, _cwork_queue.work_queue_stats_tasks_dispatched_set)
    tasks_done = property(_cwork_queue.work_queue_stats_tasks_done_get, _cwork_queue.work_queue_stats_tasks_done_set)
    tasks_failed = property(_cwork_queue.work_queue_stats_tasks_failed_get, _cwork_queue.work_queue_stats_tasks_failed_set)
    tasks_cancelled = property(_cwork_queue.work_queue_stats_tasks_cancelled_get, _cwork_queue.work_queue_stats_tasks_cancelled_set)
    tasks_exhausted_attempts = property(_cwork_queue.work_queue_stats_tasks_exhausted_attempts_get, _cwork_queue.work_queue_stats_tasks_exhausted_attempts_set)
    time_when_started = property(_cwork_queue.work_queue_stats_time_when_started_get, _cwork_queue.work_queue_stats_time_when_started_set)
    time_send = property(_cwork_queue.work_queue_stats_time_send_get, _cwork_queue.work_queue_stats_time_send_set)
    time_receive = property(_cwork_queue.work_queue_stats_time_receive_get, _cwork_queue.work_queue_stats_time_receive_set)
    time_send_good = property(_cwork_queue.work_queue_stats_time_send_good_get, _cwork_queue.work_queue_stats_time_send_good_set)
    time_receive_good = property(_cwork_queue.work_queue_stats_time_receive_good_get, _cwork_queue.work_queue_stats_time_receive_good_set)
    time_status_msgs = property(_cwork_queue.work_queue_stats_time_status_msgs_get, _cwork_queue.work_queue_stats_time_status_msgs_set)
    time_internal = property(_cwork_queue.work_queue_stats_time_internal_get, _cwork_queue.work_queue_stats_time_internal_set)
    time_polling = property(_cwork_queue.work_queue_stats_time_polling_get, _cwork_queue.work_queue_stats_time_polling_set)
    time_application = property(_cwork_queue.work_queue_stats_time_application_get, _cwork_queue.work_queue_stats_time_application_set)
    time_workers_execute = property(_cwork_queue.work_queue_stats_time_workers_execute_get, _cwork_queue.work_queue_stats_time_workers_execute_set)
    time_workers_execute_good = property(_cwork_queue.work_queue_stats_time_workers_execute_good_get, _cwork_queue.work_queue_stats_time_workers_execute_good_set)
    time_workers_execute_exhaustion = property(_cwork_queue.work_queue_stats_time_workers_execute_exhaustion_get, _cwork_queue.work_queue_stats_time_workers_execute_exhaustion_set)
    bytes_sent = property(_cwork_queue.work_queue_stats_bytes_sent_get, _cwork_queue.work_queue_stats_bytes_sent_set)
    bytes_received = property(_cwork_queue.work_queue_stats_bytes_received_get, _cwork_queue.work_queue_stats_bytes_received_set)
    bandwidth = property(_cwork_queue.work_queue_stats_bandwidth_get, _cwork_queue.work_queue_stats_bandwidth_set)
    capacity_tasks = property(_cwork_queue.work_queue_stats_capacity_tasks_get, _cwork_queue.work_queue_stats_capacity_tasks_set)
    capacity_cores = property(_cwork_queue.work_queue_stats_capacity_cores_get, _cwork_queue.work_queue_stats_capacity_cores_set)
    capacity_memory = property(_cwork_queue.work_queue_stats_capacity_memory_get, _cwork_queue.work_queue_stats_capacity_memory_set)
    capacity_disk = property(_cwork_queue.work_queue_stats_capacity_disk_get, _cwork_queue.work_queue_stats_capacity_disk_set)
    capacity_gpus = property(_cwork_queue.work_queue_stats_capacity_gpus_get, _cwork_queue.work_queue_stats_capacity_gpus_set)
    capacity_instantaneous = property(_cwork_queue.work_queue_stats_capacity_instantaneous_get, _cwork_queue.work_queue_stats_capacity_instantaneous_set)
    capacity_weighted = property(_cwork_queue.work_queue_stats_capacity_weighted_get, _cwork_queue.work_queue_stats_capacity_weighted_set)
    total_cores = property(_cwork_queue.work_queue_stats_total_cores_get, _cwork_queue.work_queue_stats_total_cores_set)
    total_memory = property(_cwork_queue.work_queue_stats_total_memory_get, _cwork_queue.work_queue_stats_total_memory_set)
    total_disk = property(_cwork_queue.work_queue_stats_total_disk_get, _cwork_queue.work_queue_stats_total_disk_set)
    committed_cores = property(_cwork_queue.work_queue_stats_committed_cores_get, _cwork_queue.work_queue_stats_committed_cores_set)
    committed_memory = property(_cwork_queue.work_queue_stats_committed_memory_get, _cwork_queue.work_queue_stats_committed_memory_set)
    committed_disk = property(_cwork_queue.work_queue_stats_committed_disk_get, _cwork_queue.work_queue_stats_committed_disk_set)
    max_cores = property(_cwork_queue.work_queue_stats_max_cores_get, _cwork_queue.work_queue_stats_max_cores_set)
    max_memory = property(_cwork_queue.work_queue_stats_max_memory_get, _cwork_queue.work_queue_stats_max_memory_set)
    max_disk = property(_cwork_queue.work_queue_stats_max_disk_get, _cwork_queue.work_queue_stats_max_disk_set)
    min_cores = property(_cwork_queue.work_queue_stats_min_cores_get, _cwork_queue.work_queue_stats_min_cores_set)
    min_memory = property(_cwork_queue.work_queue_stats_min_memory_get, _cwork_queue.work_queue_stats_min_memory_set)
    min_disk = property(_cwork_queue.work_queue_stats_min_disk_get, _cwork_queue.work_queue_stats_min_disk_set)
    manager_load = property(_cwork_queue.work_queue_stats_manager_load_get, _cwork_queue.work_queue_stats_manager_load_set)
    total_workers_connected = property(_cwork_queue.work_queue_stats_total_workers_connected_get, _cwork_queue.work_queue_stats_total_workers_connected_set)
    total_workers_joined = property(_cwork_queue.work_queue_stats_total_workers_joined_get, _cwork_queue.work_queue_stats_total_workers_joined_set)
    total_workers_removed = property(_cwork_queue.work_queue_stats_total_workers_removed_get, _cwork_queue.work_queue_stats_total_workers_removed_set)
    total_workers_lost = property(_cwork_queue.work_queue_stats_total_workers_lost_get, _cwork_queue.work_queue_stats_total_workers_lost_set)
    total_workers_idled_out = property(_cwork_queue.work_queue_stats_total_workers_idled_out_get, _cwork_queue.work_queue_stats_total_workers_idled_out_set)
    total_workers_fast_aborted = property(_cwork_queue.work_queue_stats_total_workers_fast_aborted_get, _cwork_queue.work_queue_stats_total_workers_fast_aborted_set)
    tasks_complete = property(_cwork_queue.work_queue_stats_tasks_complete_get, _cwork_queue.work_queue_stats_tasks_complete_set)
    total_tasks_dispatched = property(_cwork_queue.work_queue_stats_total_tasks_dispatched_get, _cwork_queue.work_queue_stats_total_tasks_dispatched_set)
    total_tasks_complete = property(_cwork_queue.work_queue_stats_total_tasks_complete_get, _cwork_queue.work_queue_stats_total_tasks_complete_set)
    total_tasks_failed = property(_cwork_queue.work_queue_stats_total_tasks_failed_get, _cwork_queue.work_queue_stats_total_tasks_failed_set)
    total_tasks_cancelled = property(_cwork_queue.work_queue_stats_total_tasks_cancelled_get, _cwork_queue.work_queue_stats_total_tasks_cancelled_set)
    total_exhausted_attempts = property(_cwork_queue.work_queue_stats_total_exhausted_attempts_get, _cwork_queue.work_queue_stats_total_exhausted_attempts_set)
    start_time = property(_cwork_queue.work_queue_stats_start_time_get, _cwork_queue.work_queue_stats_start_time_set)
    total_send_time = property(_cwork_queue.work_queue_stats_total_send_time_get, _cwork_queue.work_queue_stats_total_send_time_set)
    total_receive_time = property(_cwork_queue.work_queue_stats_total_receive_time_get, _cwork_queue.work_queue_stats_total_receive_time_set)
    total_good_transfer_time = property(_cwork_queue.work_queue_stats_total_good_transfer_time_get, _cwork_queue.work_queue_stats_total_good_transfer_time_set)
    total_execute_time = property(_cwork_queue.work_queue_stats_total_execute_time_get, _cwork_queue.work_queue_stats_total_execute_time_set)
    total_good_execute_time = property(_cwork_queue.work_queue_stats_total_good_execute_time_get, _cwork_queue.work_queue_stats_total_good_execute_time_set)
    total_exhausted_execute_time = property(_cwork_queue.work_queue_stats_total_exhausted_execute_time_get, _cwork_queue.work_queue_stats_total_exhausted_execute_time_set)
    total_bytes_sent = property(_cwork_queue.work_queue_stats_total_bytes_sent_get, _cwork_queue.work_queue_stats_total_bytes_sent_set)
    total_bytes_received = property(_cwork_queue.work_queue_stats_total_bytes_received_get, _cwork_queue.work_queue_stats_total_bytes_received_set)
    capacity = property(_cwork_queue.work_queue_stats_capacity_get, _cwork_queue.work_queue_stats_capacity_set)
    efficiency = property(_cwork_queue.work_queue_stats_efficiency_get, _cwork_queue.work_queue_stats_efficiency_set)
    idle_percentage = property(_cwork_queue.work_queue_stats_idle_percentage_get, _cwork_queue.work_queue_stats_idle_percentage_set)
    total_gpus = property(_cwork_queue.work_queue_stats_total_gpus_get, _cwork_queue.work_queue_stats_total_gpus_set)
    committed_gpus = property(_cwork_queue.work_queue_stats_committed_gpus_get, _cwork_queue.work_queue_stats_committed_gpus_set)
    max_gpus = property(_cwork_queue.work_queue_stats_max_gpus_get, _cwork_queue.work_queue_stats_max_gpus_set)
    min_gpus = property(_cwork_queue.work_queue_stats_min_gpus_get, _cwork_queue.work_queue_stats_min_gpus_set)
    port = property(_cwork_queue.work_queue_stats_port_get, _cwork_queue.work_queue_stats_port_set)
    priority = property(_cwork_queue.work_queue_stats_priority_get, _cwork_queue.work_queue_stats_priority_set)
    workers_ready = property(_cwork_queue.work_queue_stats_workers_ready_get, _cwork_queue.work_queue_stats_workers_ready_set)
    workers_full = property(_cwork_queue.work_queue_stats_workers_full_get, _cwork_queue.work_queue_stats_workers_full_set)
    total_worker_slots = property(_cwork_queue.work_queue_stats_total_worker_slots_get, _cwork_queue.work_queue_stats_total_worker_slots_set)
    avg_capacity = property(_cwork_queue.work_queue_stats_avg_capacity_get, _cwork_queue.work_queue_stats_avg_capacity_set)
    workers_blacklisted = property(_cwork_queue.work_queue_stats_workers_blacklisted_get, _cwork_queue.work_queue_stats_workers_blacklisted_set)

    def __init__(self):
        _cwork_queue.work_queue_stats_swiginit(self, _cwork_queue.new_work_queue_stats())
    __swig_destroy__ = _cwork_queue.delete_work_queue_stats

# Register work_queue_stats in _cwork_queue:
_cwork_queue.work_queue_stats_swigregister(work_queue_stats)

def work_queue_task_create(full_command):
    return _cwork_queue.work_queue_task_create(full_command)

def work_queue_task_clone(task):
    return _cwork_queue.work_queue_task_clone(task)

def work_queue_task_specify_command(t, cmd):
    return _cwork_queue.work_queue_task_specify_command(t, cmd)

def work_queue_task_specify_coprocess(t, coprocess_name):
    return _cwork_queue.work_queue_task_specify_coprocess(t, coprocess_name)

def work_queue_task_specify_file(t, local_name, remote_name, type, flags):
    return _cwork_queue.work_queue_task_specify_file(t, local_name, remote_name, type, flags)

def work_queue_task_specify_file_piece(t, local_name, remote_name, start_byte, end_byte, type, flags):
    return _cwork_queue.work_queue_task_specify_file_piece(t, local_name, remote_name, start_byte, end_byte, type, flags)

def work_queue_task_specify_buffer(t, data, length, remote_name, flags):
    return _cwork_queue.work_queue_task_specify_buffer(t, data, length, remote_name, flags)

def work_queue_task_specify_directory(t, local_name, remote_name, type, flags, recursive):
    return _cwork_queue.work_queue_task_specify_directory(t, local_name, remote_name, type, flags, recursive)

def work_queue_task_specify_url(t, url, remote_name, type, flags):
    return _cwork_queue.work_queue_task_specify_url(t, url, remote_name, type, flags)

def work_queue_task_specify_file_command(t, cmd, remote_name, type, flags):
    return _cwork_queue.work_queue_task_specify_file_command(t, cmd, remote_name, type, flags)

def work_queue_task_specify_max_retries(t, max_retries):
    return _cwork_queue.work_queue_task_specify_max_retries(t, max_retries)

def work_queue_task_specify_memory(t, memory):
    return _cwork_queue.work_queue_task_specify_memory(t, memory)

def work_queue_task_specify_disk(t, disk):
    return _cwork_queue.work_queue_task_specify_disk(t, disk)

def work_queue_task_specify_cores(t, cores):
    return _cwork_queue.work_queue_task_specify_cores(t, cores)

def work_queue_task_specify_gpus(t, gpus):
    return _cwork_queue.work_queue_task_specify_gpus(t, gpus)

def work_queue_task_specify_end_time(t, useconds):
    return _cwork_queue.work_queue_task_specify_end_time(t, useconds)

def work_queue_task_specify_start_time_min(t, useconds):
    return _cwork_queue.work_queue_task_specify_start_time_min(t, useconds)

def work_queue_task_specify_running_time(t, useconds):
    return _cwork_queue.work_queue_task_specify_running_time(t, useconds)

def work_queue_task_specify_running_time_max(t, seconds):
    return _cwork_queue.work_queue_task_specify_running_time_max(t, seconds)

def work_queue_task_specify_running_time_min(t, seconds):
    return _cwork_queue.work_queue_task_specify_running_time_min(t, seconds)

def work_queue_task_specify_tag(t, tag):
    return _cwork_queue.work_queue_task_specify_tag(t, tag)

def work_queue_task_specify_category(t, category):
    return _cwork_queue.work_queue_task_specify_category(t, category)

def work_queue_task_specify_feature(t, name):
    return _cwork_queue.work_queue_task_specify_feature(t, name)

def work_queue_task_specify_priority(t, priority):
    return _cwork_queue.work_queue_task_specify_priority(t, priority)

def work_queue_task_specify_environment_variable(t, name, value):
    return _cwork_queue.work_queue_task_specify_environment_variable(t, name, value)

def work_queue_task_specify_algorithm(t, algorithm):
    return _cwork_queue.work_queue_task_specify_algorithm(t, algorithm)

def work_queue_task_specify_monitor_output(t, monitor_output):
    return _cwork_queue.work_queue_task_specify_monitor_output(t, monitor_output)

def work_queue_task_delete(t):
    return _cwork_queue.work_queue_task_delete(t)

def work_queue_specify_snapshot_file(t, monitor_snapshot_file):
    return _cwork_queue.work_queue_specify_snapshot_file(t, monitor_snapshot_file)

def work_queue_create(port):
    return _cwork_queue.work_queue_create(port)

def work_queue_ssl_create(port, key, cert):
    return _cwork_queue.work_queue_ssl_create(port, key, cert)

def work_queue_enable_monitoring(q, monitor_output_directory, watchdog):
    return _cwork_queue.work_queue_enable_monitoring(q, monitor_output_directory, watchdog)

def work_queue_enable_monitoring_full(q, monitor_output_directory, watchdog):
    return _cwork_queue.work_queue_enable_monitoring_full(q, monitor_output_directory, watchdog)

def work_queue_submit(q, t):
    return _cwork_queue.work_queue_submit(q, t)

def work_queue_specify_min_taskid(q, minid):
    return _cwork_queue.work_queue_specify_min_taskid(q, minid)

def work_queue_block_host(q, hostname):
    return _cwork_queue.work_queue_block_host(q, hostname)

def work_queue_block_host_with_timeout(q, hostname, seconds):
    return _cwork_queue.work_queue_block_host_with_timeout(q, hostname, seconds)

def work_queue_unblock_host(q, hostname):
    return _cwork_queue.work_queue_unblock_host(q, hostname)

def work_queue_unblock_all(q):
    return _cwork_queue.work_queue_unblock_all(q)

def work_queue_invalidate_cached_file(q, local_name, type):
    return _cwork_queue.work_queue_invalidate_cached_file(q, local_name, type)

def work_queue_wait(q, timeout):
    return _cwork_queue.work_queue_wait(q, timeout)

def work_queue_wait_for_tag(q, tag, timeout):
    return _cwork_queue.work_queue_wait_for_tag(q, tag, timeout)

def work_queue_hungry(q):
    return _cwork_queue.work_queue_hungry(q)

def work_queue_empty(q):
    return _cwork_queue.work_queue_empty(q)

def work_queue_port(q):
    return _cwork_queue.work_queue_port(q)

def work_queue_get_stats(q, s):
    return _cwork_queue.work_queue_get_stats(q, s)

def work_queue_get_stats_hierarchy(q, s):
    return _cwork_queue.work_queue_get_stats_hierarchy(q, s)

def work_queue_get_stats_category(q, c, s):
    return _cwork_queue.work_queue_get_stats_category(q, c, s)

def work_queue_status(q, request):
    return _cwork_queue.work_queue_status(q, request)

def work_queue_workers_summary(q):
    return _cwork_queue.work_queue_workers_summary(q)

def work_queue_task_state(q, taskid):
    return _cwork_queue.work_queue_task_state(q, taskid)

def work_queue_set_bandwidth_limit(q, bandwidth):
    return _cwork_queue.work_queue_set_bandwidth_limit(q, bandwidth)

def work_queue_get_effective_bandwidth(q):
    return _cwork_queue.work_queue_get_effective_bandwidth(q)

def work_queue_get_worker_summary(q):
    return _cwork_queue.work_queue_get_worker_summary(q)

def work_queue_activate_fast_abort(q, multiplier):
    return _cwork_queue.work_queue_activate_fast_abort(q, multiplier)

def work_queue_activate_fast_abort_category(q, category, multiplier):
    return _cwork_queue.work_queue_activate_fast_abort_category(q, category, multiplier)

def work_queue_specify_draining_by_hostname(q, hostname, drain_flag):
    return _cwork_queue.work_queue_specify_draining_by_hostname(q, hostname, drain_flag)

def work_queue_specify_category_mode(q, category, mode):
    return _cwork_queue.work_queue_specify_category_mode(q, category, mode)

def work_queue_enable_category_resource(q, category, resource, autolabel):
    return _cwork_queue.work_queue_enable_category_resource(q, category, resource, autolabel)

def work_queue_specify_algorithm(q, algorithm):
    return _cwork_queue.work_queue_specify_algorithm(q, algorithm)

def work_queue_name(q):
    return _cwork_queue.work_queue_name(q)

def work_queue_specify_name(q, name):
    return _cwork_queue.work_queue_specify_name(q, name)

def work_queue_specify_debug_path(q, path):
    return _cwork_queue.work_queue_specify_debug_path(q, path)

def work_queue_specify_tlq_port(q, port):
    return _cwork_queue.work_queue_specify_tlq_port(q, port)

def work_queue_specify_priority(q, priority):
    return _cwork_queue.work_queue_specify_priority(q, priority)

def work_queue_specify_num_tasks_left(q, ntasks):
    return _cwork_queue.work_queue_specify_num_tasks_left(q, ntasks)

def work_queue_specify_catalog_server(q, hostname, port):
    return _cwork_queue.work_queue_specify_catalog_server(q, hostname, port)

def work_queue_specify_catalog_servers(q, hosts):
    return _cwork_queue.work_queue_specify_catalog_servers(q, hosts)

def work_queue_cancel_by_taskid(q, id):
    return _cwork_queue.work_queue_cancel_by_taskid(q, id)

def work_queue_cancel_by_tasktag(q, tag):
    return _cwork_queue.work_queue_cancel_by_tasktag(q, tag)

def work_queue_shut_down_workers(q, n):
    return _cwork_queue.work_queue_shut_down_workers(q, n)

def work_queue_delete(q):
    return _cwork_queue.work_queue_delete(q)

def work_queue_specify_log(q, logfile):
    return _cwork_queue.work_queue_specify_log(q, logfile)

def work_queue_specify_transactions_log(q, logfile):
    return _cwork_queue.work_queue_specify_transactions_log(q, logfile)

def work_queue_specify_password(q, password):
    return _cwork_queue.work_queue_specify_password(q, password)

def work_queue_specify_password_file(q, file):
    return _cwork_queue.work_queue_specify_password_file(q, file)

def work_queue_specify_keepalive_interval(q, interval):
    return _cwork_queue.work_queue_specify_keepalive_interval(q, interval)

def work_queue_specify_keepalive_timeout(q, timeout):
    return _cwork_queue.work_queue_specify_keepalive_timeout(q, timeout)

def work_queue_manager_preferred_connection(q, preferred_connection):
    return _cwork_queue.work_queue_manager_preferred_connection(q, preferred_connection)

def work_queue_tune(q, name, value):
    return _cwork_queue.work_queue_tune(q, name, value)

def work_queue_specify_max_resources(q, rm):
    return _cwork_queue.work_queue_specify_max_resources(q, rm)

def work_queue_specify_min_resources(q, rm):
    return _cwork_queue.work_queue_specify_min_resources(q, rm)

def work_queue_specify_category_max_resources(q, category, rm):
    return _cwork_queue.work_queue_specify_category_max_resources(q, category, rm)

def work_queue_specify_category_min_resources(q, category, rm):
    return _cwork_queue.work_queue_specify_category_min_resources(q, category, rm)

def work_queue_specify_category_first_allocation_guess(q, category, rm):
    return _cwork_queue.work_queue_specify_category_first_allocation_guess(q, category, rm)

def work_queue_initialize_categories(q, max, summaries_file):
    return _cwork_queue.work_queue_initialize_categories(q, max, summaries_file)

def work_queue_result_str(result):
    return _cwork_queue.work_queue_result_str(result)
WORK_QUEUE_TASK_ORDER_FIFO = _cwork_queue.WORK_QUEUE_TASK_ORDER_FIFO
WORK_QUEUE_TASK_ORDER_LIFO = _cwork_queue.WORK_QUEUE_TASK_ORDER_LIFO

def work_queue_specify_task_order(q, order):
    return _cwork_queue.work_queue_specify_task_order(q, order)
WORK_QUEUE_MANAGER_MODE_STANDALONE = _cwork_queue.WORK_QUEUE_MANAGER_MODE_STANDALONE
WORK_QUEUE_MANAGER_MODE_CATALOG = _cwork_queue.WORK_QUEUE_MANAGER_MODE_CATALOG

def work_queue_specify_manager_mode(q, mode):
    return _cwork_queue.work_queue_specify_manager_mode(q, mode)

def work_queue_specify_estimate_capacity_on(q, estimate_capacity_on):
    return _cwork_queue.work_queue_specify_estimate_capacity_on(q, estimate_capacity_on)

def work_queue_task_specify_input_buf(t, buf, length, rname):
    return _cwork_queue.work_queue_task_specify_input_buf(t, buf, length, rname)

def work_queue_task_specify_input_file(t, fname, rname):
    return _cwork_queue.work_queue_task_specify_input_file(t, fname, rname)

def work_queue_task_specify_input_file_do_not_cache(t, fname, rname):
    return _cwork_queue.work_queue_task_specify_input_file_do_not_cache(t, fname, rname)

def work_queue_task_specify_output_file(t, rname, fname):
    return _cwork_queue.work_queue_task_specify_output_file(t, rname, fname)

def work_queue_task_specify_output_file_do_not_cache(t, rname, fname):
    return _cwork_queue.work_queue_task_specify_output_file_do_not_cache(t, rname, fname)

def work_queue_generate_disk_alloc_full_filename(pwd, taskid):
    return _cwork_queue.work_queue_generate_disk_alloc_full_filename(pwd, taskid)

def work_queue_task_specify_enviroment_variable(t, name, value):
    return _cwork_queue.work_queue_task_specify_enviroment_variable(t, name, value)

